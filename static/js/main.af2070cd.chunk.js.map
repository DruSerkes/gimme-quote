{"version":3,"sources":["styledComponents.tsx","ShowQuote.tsx","Quote.tsx","helpers.ts","Footer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Main","styled","main","BlockQuote","blockquote","Button","button","H1","h1","ShowQuote","quote","Fragment","content","author","Quote","useState","setQuote","loading","setLoading","text","useRef","useEffect","a","fetch","res","json","current","console","log","setTimeout","getQuote","className","type","color","height","width","id","title","href","target","rel","icon","faTwitter","onClick","val","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","copyText","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0iDAEO,IAAMA,EAAOC,IAAOC,KAAV,KAQJC,EAAaF,IAAOG,WAAV,KAOVC,EAASJ,IAAOK,OAAV,KA8BNC,EAAKN,IAAOO,GAAV,KC1BAC,EAToB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrC,OACO,kBAAC,IAAMC,SAAP,KACI,kBAACR,EAAD,gBAAcO,QAAd,IAAcA,OAAd,EAAcA,EAAOE,QAArB,KACA,qCAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAOG,U,gBCyDXC,EA3DS,WAAO,IAAD,EACDC,mBAA2B,MAD1B,mBACrBL,EADqB,KACdM,EADc,OAEGD,oBAAS,GAFZ,mBAErBE,EAFqB,KAEZC,EAFY,KAGvBC,EAAOC,iBAAO,IAEpBC,qBACC,WAeMX,GAdS,uCAAG,kCAAAY,EAAA,sEAEfJ,GAAW,GAFI,SAGGK,MAAM,kCAHT,cAGTC,EAHS,gBAImBA,EAAIC,OAJvB,gBAIPb,EAJO,EAIPA,QAASC,EAJF,EAIEA,OACjBG,EAAS,CAAEJ,UAASC,WACpBM,EAAKO,QAAL,WAAmBd,EAAnB,cAAgCC,GANjB,kDAQfc,QAAQC,IAAR,MACAZ,EAAS,MATM,yBAWfa,YAAW,kBAAMX,GAAW,KAAQ,KAXrB,6EAAH,oDAcFY,KAEb,CAAEpB,IAQH,OACC,yBAAKqB,UAAU,SACd,kBAAC/B,EAAD,CAAM+B,UAAU,cACdd,EACA,kBAAC,IAAD,CAAQe,KAAK,YAAYC,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAE5D,kBAAC,EAAD,CAAWzB,MAAOA,KAGpB,6BAASqB,UAAU,iBAClB,kBAAC1B,EAAD,KACC,uBACC+B,GAAG,cACHC,MAAM,kBACNC,KAAI,gDAA2CnB,EAAKO,SACpDa,OAAO,SACPC,IAAI,sBACJT,UAAU,gBACV,kBAAC,IAAD,CAAiBU,KAAMC,QAGzB,kBAACrC,EAAD,CAAQsC,QAAS,kBClEG,SAACC,GACxB,IAAMC,EAAQC,SAASC,cAAc,SACrCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,aAAa,QAASN,GAC5BC,EAAMM,SACNL,SAASM,YAAY,QACrBN,SAASE,KAAKK,YAAYR,GD4DAS,CAASnC,EAAKO,WAArC,QACA,kBAACrB,EAAD,CAAQsC,QA3BS,WACnB3B,EAAS,MACTE,GAAW,KAyBT,gBErDWqC,EAZA,WACd,OACC,4BAAQxB,UAAU,UACjB,2BACC,uBAAGO,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAA3D,0BCUWgB,EAVO,WACrB,OACC,yBAAKzB,UAAU,OACd,kBAACxB,EAAD,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCiBkD,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDkHrB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACP9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.af2070cd.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Main = styled.main`\n\tpadding: 3rem;\n\twidth: 100%;\n\tborder-radius: 6px;\n\topacity: 0.7;\n\tbackground: whitesmoke;\n`;\n\nexport const BlockQuote = styled.blockquote`\n\ttext-align: center;\n\tfont-size: 1.3rem;\n\tcolor: darkslategray;\n\tdisplay: block;\n`;\n\nexport const Button = styled.button`\n\tdisplay: inline-block;\n\tcursor: pointer;\n\tmargin: 0.3rem 0.4rem;\n\tpadding: 0.2rem 0.7rem;\n\tbackground-color: black;\n\tborder-color: white;\n\tcolor: white;\n\tfont-size: 1.2rem;\n\tfont-family: copperplate;\n\tborder-radius: 4px;\n\ttext-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n\tbox-shadow: 1px 1px rgba(0, 0, 0, 0.2);\n\t&:hover {\n\t\tborder-left: none;\n\t\tborder-right: none;\n\t\tborder-top-width: 2px;\n\t\tborder-bottom-width: 2px;\n\t\tborder-top-style: solid;\n\t\tborder-bottom-style: solid;\n\t\tborder-top-color: white;\n\t\tborder-bottom-color: white;\n\t\tbackground-color: black;\n\t\tborder-radius: 0;\n\t\ttransition: all 0.8s;\n\t\tcolor: white;\n\t\ttransform: scale(1.05, 1);\n\t}\n`;\n\nexport const H1 = styled.h1`\n\tmargin: 0.8rem auto 0;\n\tcolor: white;\n\tfont-size: 3rem;\n`;\n","import React from 'react';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { BlockQuote } from './styledComponents';\n\ninterface QuoteData {\n\tcontent: string;\n\tauthor: string;\n}\ntype Props = {\n\tquote: QuoteData | null;\n};\n\nconst ShowQuote: React.FC<Props> = ({ quote }) => {\n\treturn (\n        <React.Fragment>\n            <BlockQuote>\"{quote?.content}\"</BlockQuote>\n            <cite>{quote?.author}</cite>\n        </React.Fragment>\n\t);\n};\n\nexport default ShowQuote;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { Button, Main } from './styledComponents';\nimport ShowQuote from './ShowQuote';\nimport { copyText } from './helpers';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\ninterface QuoteData {\n\tcontent: string;\n\tauthor: string;\n}\n\nconst Quote: React.FC = () => {\n\tconst [ quote, setQuote ] = useState<QuoteData | null>(null);\n\tconst [ loading, setLoading ] = useState(true);\n\tconst text = useRef('');\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconst getQuote = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tsetLoading(true);\n\t\t\t\t\tconst res = await fetch('https://api.quotable.io/random');\n\t\t\t\t\tconst { content, author } = await res.json();\n\t\t\t\t\tsetQuote({ content, author });\n\t\t\t\t\ttext.current = `\"${content}\" -${author}`;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\tsetQuote(null);\n\t\t\t\t} finally {\n\t\t\t\t\tsetTimeout(() => setLoading(false), 500);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (!quote) getQuote();\n\t\t},\n\t\t[ quote ]\n\t);\n\n\tconst getNewQuote = () => {\n\t\tsetQuote(null);\n\t\tsetLoading(true);\n\t};\n\n\treturn (\n\t\t<div className=\"Quote\">\n\t\t\t<Main className=\"Quote-Main\">\n\t\t\t\t{loading ? (\n\t\t\t\t\t<Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\n\t\t\t\t) : (\n\t\t\t\t\t<ShowQuote quote={quote} />\n\t\t\t\t)}\n\t\t\t</Main>\n\t\t\t<section className=\"Quote-Buttons\">\n\t\t\t\t<Button>\n\t\t\t\t\t<a\n\t\t\t\t\t\tid=\"tweet-quote\"\n\t\t\t\t\t\ttitle=\"tweet this code\"\n\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?text=${text.current}`}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\tclassName=\"Tweet-Button\">\n\t\t\t\t\t\t<FontAwesomeIcon icon={faTwitter} />\n\t\t\t\t\t</a>\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={() => copyText(text.current)}>Copy</Button>\n\t\t\t\t<Button onClick={getNewQuote}>New Quote</Button>\n\t\t\t</section>\n\t\t</div>\n\t);\n};\n\nexport default Quote;\n","export const copyText = (val: string) => {\n\tconst dummy = document.createElement('input');\n\tdocument.body.appendChild(dummy);\n\tdummy.setAttribute('value', val);\n\tdummy.select();\n\tdocument.execCommand('copy');\n\tdocument.body.removeChild(dummy);\n};\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer className=\"Footer\">\n\t\t\t<p>\n\t\t\t\t<a href=\"https://github.com/druserkes\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tDru Serkes &copy;2020\n\t\t\t\t</a>\n\t\t\t</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Quote from './Quote';\nimport Footer from './Footer';\nimport { H1 } from './styledComponents';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<H1>Quote Me</H1>\n\t\t\t<Quote />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders : { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}